import random


class Entradas():
    def __init__(self, valor, pesos):
        self.valor = int(valor)
        self.pesos = dict(pesos)


def soma(entrada, peso):
    print(f'Peso escolhido  = {peso}')
    constat = 0
    val_soma = 0
    for e in entrada:
        val_soma += e['valor'] * e['pesos'][peso]
    return round(val_soma + constat, 2)


def custo(resultado, r_ideal):
    return round(((resultado - r_ideal) ** 2), 2)


def cria_peso(qtd_pesos):
    pesos = {}
    for n_peso in range(qtd_pesos):
        pesos[f'w{n_peso}'] = round(random.random(), 2)
    return pesos


def cria_lista_entradas(qtd_entradas, qtd_pesos_entradas):
    entrada = []
    for n_entrada in range(qtd_entradas):
        vars()[f'e{str(n_entrada)}'] = {
            "none": f'Entrada {str(n_entrada)}',
            "valor": round(random.random(), 2),
            "pesos": cria_peso(qtd_pesos_entradas)
        }
    entrada.append(vars()[f'e{str(n_entrada)}'])
    return entrada


def peso_aleatorio(entrada):
    return f'w{str(random.randint(0, len(entrada["Pesos"]) - 1))}'


def peso_aleatorio(valor):
    return f'w{str(random.randint(0, int(valor) - 1))}'


def print_lista_entradas(entrada):
    for item in entrada:
        print(f'{item["nome"]}: valor = {item["valor"]}, pesos = {item["pesos"]} ')
    print('\n')


def entrada_total(entrada):
    for item in entrada:
        print(item)
    print('\n')


def iniciar():  # Incia
    valores_entrada = 10
    valores_peso = 10
    print('\n - iniciando -\n')
    print(f' Quantidade de entradas: {valores_entrada}\n Quantidade de pesos: {valores_peso}\n')

    entrada = cria_lista_entradas(valores_entrada, valores_peso)
    saida = cria_lista_entradas(valores_entrada, valores_peso)
    print('\n')
    print('Primeira lista:\n')
    print_lista_entradas(entrada)
    print('Segunda lista:\n')
    print_lista_entradas(saida)
    print('\n')

    Soma1 = soma(entrada, peso_aleatorio(valores_peso))
    Soma2 = soma(entrada, peso_aleatorio(valores_peso))

    c1 = custo(Soma1, 1)
    c2 = custo(Soma2, 1)
    Set_point = c1 - c2

    print(f'Valor da função 1: {Soma1}')
    print(f'Valor da primeira função: {c1}')
    print(f'Valor da função 2: {Soma2}\n')
    print(f'Valor da segunda função: {c2}')
    print('Valor ideal: 3.95')
    print(f'{c1} - {c2} = {Set_point}\n')

    if Set_point < 3.95:
        print(f'Valor abaixo do ideal: {Set_point}')
    elif Set_point > 3.95:
        print(f'Valor acima do ideal: {Set_point}')
    else:
        print(f'Valor ideal atingido: {Set_point}')


if __name__ == '__main__':
    iniciar()
